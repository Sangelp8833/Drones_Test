allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    compileJava.dependsOn validateStructure
    sourceCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco.xml")
            csv.enabled false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }

    test{
        useJUnitPlatform()
    }

}

project(':jpa-repository'){
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation "org.reactivecommons.utils:object-mapper-api:${objectMapperApiVersion}"
        testImplementation "org.reactivecommons.utils:object-mapper:${objectMapperVersion}"
        implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
        runtimeOnly 'com.h2database:h2'
        implementation 'org.apache.commons:commons-text:1.9'
        implementation "javax.validation:validation-api:${javaxValidationApiVersion}"
        implementation "org.springframework.boot:spring-boot-starter-mail:${springBootStarterMailVersion}"
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}

project(':api-rest'){
    dependencies{
        implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-hateoas:2.7.3'
        //implementation "io.springfox:springfox-swagger2:${springfoxSwagger2Version}"
        //implementation "io.springfox:springfox-boot-starter:${springfoxBootStarterVersion}"
        //implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerUiVersion}"
        implementation "org.springdoc:springdoc-openapi-ui:${springdoc}"
        implementation "io.jsonwebtoken:jjwt:${jsonwebtokenJjwtVersion}"
        implementation "com.auth0:java-jwt:${authjwtVersio}"
        implementation 'com.opencsv:opencsv:4.1'
        implementation 'org.apache.poi:poi:3.12'
        implementation 'org.apache.poi:poi-ooxml:3.12'
        implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: "${nimbusJoseJwtVersion}"
        implementation "org.springframework.boot:spring-boot-starter-mail:${springBootStarterMailVersion}"
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}

project(':app-service'){
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-undertow:${springBootStarterUndertowVersion}"
        implementation "org.reactivecommons.utils:object-mapper:${objectMapperVersion}"
        implementation "com.zaxxer:HikariCP:${HikariCPVersion}"
        implementation "org.reactivecommons.utils:object-mapper:${objectMapperVersion}"
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        runtimeOnly('org.springframework.boot:spring-boot-devtools')
        implementation "org.springframework.boot:spring-boot-starter-parent:${springBootStarterParentVersion}"
        implementation('org.postgresql:postgresql')
        //implementation "io.springfox:springfox-swagger2:${springfoxSwagger2Version}"
        //implementation "io.springfox:springfox-boot-starter:${springfoxBootStarterVersion}"
        //implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerUiVersion}"
        implementation "org.springdoc:springdoc-openapi-ui:${springdoc}"
        implementation "com.amazonaws.secretsmanager:aws-secretsmanager-jdbc:${awsSecretManagerVersion}"
        implementation "com.google.code.gson:gson:${gsonVersion}"
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}


jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file("$buildDir/reports")
}

task jacocoMergedReport(type: JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}
tasks.named('wrapper') {
    gradleVersion = '6.7'
}
